/* -*-c++-*- */
#ifndef LD_XMLSERIALIZATION_H
#define LD_XMLSERIALIZATION_H 1

#include <libxml/parser.h>
#include <libxml/tree.h>
#include <sstream>
#include <iostream>
#include "XmlSerializationException.h"

using std::ostringstream;
using std::ostream;

namespace LightningDev
{
  class XmlSerialization
  {
  private:
    /**
     * How many spaces to indent.
     */
    static const int INDENT = 3;
  public:
    virtual ~XmlSerialization();

    /**
     * Useful for first call, should not be used from another.  It allocates
     * a static storage space to manage the text formating.  The default
     * implementation is implemented in terms of getXml(unsigned int, ostream&)
     * and should handle almost all cases.
     *
     * @param unsigned int baseIndent for how many spaces to start indenting from.
     * @return const xmlChar* to the xml doclet generated by this function.
     */
    virtual const xmlChar* getXml(unsigned int baseIndent=0) const;

    /**
     * Call from within getXml, may be called initially as well, it does not
     * allocate a storage space, rather it writes directly to retStrem, called
     * from getXml(insigned int baseIndent).
     *
     * @param retStream ostream& to the output stream to write to.
     * @return void
     */
    virtual void getXml(unsigned int baseIndent, ostream& retStream) const = 0;

    /**
     * Returns a string of INDENT*number spaces.
     *
     * @param number unsigned int for the number of indentations.
     * @return const char* pointing at the number of spaces to use for indentation.
     */
    static const char* getIndent(unsigned int number);

    /**
     * Returns a const char* to the value of inNode's name attribute.
     * "" if unfound.  The node type in question must be an attribute
     * node.
     *
     * @param curAttr xmlAttr* to the set of attributes to search.
     * @return const char* to the value of inNode's type attribute.
     */
    static const char* getAttributeName(xmlNodePtr inNode);

    /**
     * Returns a const char* to the value of inNode's type attribute.
     * "" if unfound.  The node in question must be an attribute node.
     *
     * @param curAttr xmlAttr* to the set of attributes to search.
     * @return const char* to the value of inNodes name attribute.
     */
    static const char* getAttributeType(xmlNodePtr inNode);

    /*************************************/
    /* String Creation Utility Functions */
    /*************************************/


    /**
     * Creates the starting Attribute element tag, outputing it to retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param type const char* to the attribute elements type attribute.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getStartAttributeElement(unsigned int indent, const char* name, const char* type, ostream& retStream);
    
    /**
     * Creates the ending Attribute element tag, outputing it to retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getEndAttributeElement(unsigned int indent, ostream& retStream);



    /**
     * Creates an attribute element of type int.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param value const int for the value the attribute element contains.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getIntAttributeElement(unsigned int indent, const char* name, const int value, ostream& retStream);



    /**
     * Creates an attribute element of type bool.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param value bool for the value the attribute element contains.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getBoolAttributeElement(unsigned int indent, const char* name, bool value, ostream& retStream);


    /**
     * Creates an attribute element of type float.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param value const float for the value the attribute element contains.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getFloatAttributeElement(unsigned int indent, const char* name, const float value, ostream& retStream);


    /**
     * Creates an attribute element of type ULint.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param value const int for the value the attribute element contains.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getULIntAttributeElement(unsigned int            indent, const char* name, 
					 const unsigned long int value, ostream& retStream);


    /**
     * Creates an attribute element of type CStr.  Outputting it into retStream.
     * CStr is a C String, i.e. null terminated string.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param value const char* for the value the attribute element contains.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getCStrAttributeElement(unsigned int indent, const char* name, const char* value, ostream& retStream);


    /**
     * Creates the start attribute element of type object.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getStartObjectElement(unsigned int indent, const char* type, ostream& retStream);


    /**
     * Creates the end attribute element of type object.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getEndObjectElement(unsigned int indent, ostream& retStream);


    /**
     * Creates the start tag for the parents element.  Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getStartParentsElement(unsigned int indent, ostream& retStream);


    /**
     * Creates an end tag for the parents element, outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getEndParentsElement(unsigned int indent, ostream& retStream);


    /**
     * Creates an attribute element for an Object ineriting from XmlSerialization.  
     * Outputting it into retStream.
     *
     * @param indent unsigned int for the number of levels to indent.
     * @param name const char* to the attribute elements name attribute.
     * @param type const char* to the type for the attribute.
     * @param value const XmlSerialization& for the value the attribute element contains.
     * @param retStream ostream& to the stream the element should be written to.
     */
    static void getObjAttributeElement(unsigned int indent, const char* name, 
				       const char*  type,   const XmlSerialization& value, 
				       ostream& retStream);    



    /**
     * Returns a pointer to a newly allocated c_string.  It is the callers
     * responcibility to free the pointer.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @return char* to the copied string, MUST be delet()ed by the caller.
     */
    static char* getCStrAttributeCopy(xmlNodePtr inNode);

    /**
     * Returns a pointer to a statically allocated c_string in the method.
     * the caller should NOT delete() this pointer.  Sutable for copying
     * or string construction.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @return const char* to a string, must NOT be delete()ed by the caller
     */
    static const char* getCStrAttributeValue(xmlNodePtr inNode);


    /**
     * This method searches for an attribute with
     * the name name and of type CStr in inNode's attribute elements, then
     * returns a pointer to a statically allocated c_string to it's value.
     * The caller should NOT delete() this pointer.  Sutable for copying
     * or string construction.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @param name const char* to the name of the attribute we are looking for.
     * @return const char* to a string, must NOT be delete()ed by the caller
     * @throw XmlSerializationException if an attribute of name is found, but not of bool type.
     * @throw XmlSerializationException if no attribute of name is found.
     */
    static const char* getCStrAttributeValueByName(xmlNodePtr inNode, const char* name);



    /**
     * Returns a copy of an integer created from this attribute element.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @return char* to the copied string, MUST be delet()ed by the caller.
     */
    static long int getIntAttributeValue(xmlNodePtr inNode);



    /**
     * This method searches for an attribute with
     * the name name and of type int in inNode's attribute elements, then
     * returns a copy of this integer.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @param name const char* to the name of the attribute we are looking for.
     * @return int the value of the attribute element.
     * @throw XmlSerializationException if an attribute of name is found, but not of bool type.
     * @throw XmlSerializationException if no attribute of name is found.
     */
    static int getIntAttributeValueByName(xmlNodePtr inNode, const char* name);


    /**
     * Returns a copy of a boolean created from this attribute element.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @return bool copy of the value.
     */
    static bool getBoolAttributeValue(xmlNodePtr inNode);

    /**
     * Searches inNode's children for an attribute element of name and returns
     * the boolean value it stores.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @param name const char* to the name of the attribute element we are looking for.
     * @return bool copy of the value.
     * @throw XmlSerializationException if an attribute of name is found, but not of bool type.
     * @throw XmlSerializationException if no attribute of name is found.
     */
    static bool getBoolAttributeValueByName(xmlNodePtr inNode, const char* name);


    /**
     * Returns a copy of an unsigned long integer created from this attribute element.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @return char* to the copied string, MUST be delet()ed by the caller.
     */
    static unsigned long int getULIntAttributeValue(xmlNodePtr inNode);



    /**
     * This method searches for an attribute with
     * the name name and of type ULInt (unsigned long int) in inNode's attribute elements, then
     * returns a copy of this integer.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @param name const char* to the name of the attribute we are looking for.
     * @return int the value of the attribute element.
     * @throw XmlSerializationException if an attribute of name is found, but not of bool type.
     * @throw XmlSerializationException if no attribute of name is found.
     */
    static unsigned long int getULIntAttributeValueByName(xmlNodePtr inNode, const char* name);


    /**
     * Returns a copy of a float created from this attribute element.
     *
     * @param inNode xmlNodePtr to the node we are extracting the string from.
     * @return char* to the copied string, MUST be delet()ed by the caller.
     */
    static float getFloatAttributeValue(xmlNodePtr inNode);



    /**
     * Returns a copy of a float created from the attribute element of name name
     * in the object pointed to by inNode.
     *
     * @param inNode xmlNodePtr to the object containing this attribute
     * @param name const char* to the name of the attribute element we are looking for.
     * @return float copy of the value.
     * @throw XmlSerializationException if an attribute of name is found, but not of float type.
     * @throw XmlSerializationException if no attribute of name is found.
     */
    static float getFloatAttributeValueByName(xmlNodePtr inNode, const char* name);



    /**
     * Finds the node in the XML tree in the imediate level's attribute elements of
     * thisName and returns a pointer to it's object.
     *
     * @param inNode xmlNodePtr to where to start looking, should point at an object element.
     * @param thisName const char* to the name of the attribute we are looking for.
     * @return xmlNodePtr to the object node contents of the attribute element, 0 if not found.
     * @throw XmlSerializationException if an attribute objectof correct type could not be found.
     */
    static xmlNodePtr getObjectAttributeObject(xmlNodePtr inNode, const char* thisName);

    /**
     * Finds the node in the XML tree in the imediate level's parents element of
     * thisType and returns a pointer to it.
     * @param inNode xmlNodePtr to where to start looking, should point at an object element.
     * @param thisType const char* to the type of the parent we are looking for.
     * @return xmlNodePtr to the object node contents of the attribute element, 0 if not found.
     * @throw XmlSerializationException if a parents node could not be found, or if an object node
     *        of correct type could not be found.
     */
    static xmlNodePtr getParentsObjectNode(xmlNodePtr inNode, const char* thisType);
  };
}

#endif /* LD_XMLSERIALIZATION_H */
